{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","loading","request","error","clearError","process","setProcess","useHttp","setLoading","useState","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","description","slice","name","id","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getCharacter","result","results","getCharacterByName","getAllCharacters","offset","map","getComics","getAllComics","AppBanner","_jsxs","className","children","avengers","avengersLogo","ComicsList","comicsList","setComicsList","newItemLoading","setNewItemLoading","setOffset","comicsEnded","setComicsEnded","useEffect","onRequest","initial","then","newComics","ended","catch","Spinner","renderComicsList","i","Link","to","disabled","onClick","ComicsPage","_Fragment","Helmet","content"],"mappings":"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","file":"static/js/6.aa76c6e3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      style={{\n        display: \"block\",\n        width: \"250\",\n        height: \"250\",\n        objectFit: \"contain\",\n        margin: \"0 auto\",\n      }}\n      src={img}\n      alt=\"Error\"\n    />\n  );\n};\n\nexport default ErrorMessage;\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n  const { loading, request, error, clearError, process, setProcess } =\n    useHttp();\n\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n  const _apiKey = \"apikey=e71e2718fabff072296a2d9a69c1759c\";\n  const _baseOffset = 210;\n\n  // запити до API\n\n  //запит на групу персонажів\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const result = await request(\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`,\n    ); // Request URL з сайту Marvel Developer\n\n    //повертаємо масив з новими об'єктами\n    return result.data.results.map(_transformCharacter);\n  };\n\n  //запит на одного персонажа\n  const getCharacter = async (id) => {\n    const result = await request(`${_apiBase}characters/${id}?&${_apiKey}`); // Request URL з сайту Marvel Developer\n    return _transformCharacter(result.data.results[0]);\n  };\n\n  //запит на персонажа за іменем\n  const getCharacterByName = async (name) => {\n    const result = await request(\n      `${_apiBase}characters?name=${name}&${_apiKey}`,\n    ); // Request URL з сайту Marvel Developer\n    return _transformCharacter(result.data.results[0]);\n  };\n\n  //метод отримує дані та трансформує в необхідні. в нашому випадку отримує великий об'єкт з даними про персонажа і повертає об'єкт з потрібними нам даними\n  const _transformCharacter = (char) => {\n    //перевірка для description\n    const description = char.description\n      ? char.description.length > 150\n        ? char.description.slice(0, 149) + \"...\"\n        : char.description\n      : `There is no data about ${char.name}`;\n\n    return {\n      id: char.id,\n      name: char.name,\n      description: description,\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  //запит на групу коміксів\n  const getAllComics = async (offset = 0) => {\n    const result = await request(\n      `${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`,\n    );\n    return result.data.results.map(_transformComics);\n  };\n\n  const getComics = async (id) => {\n    const result = await request(`${_apiBase}comics/${id}?&${_apiKey}`); // Request URL з сайту Marvel Developer\n    return _transformComics(result.data.results[0]);\n  };\n\n  const _transformComics = (comics) => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || \"There is no description\",\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} p.`\n        : \"No information about the number of pages\",\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      language: comics.textObjects[0]?.language || \"en-us\",\n      price: comics.prices[0].price\n        ? `${comics.prices[0].price}$`\n        : \"not available\",\n    };\n  };\n\n  return {\n    loading,\n    error,\n    process,\n    setProcess,\n    getCharacter,\n    getCharacterByName,\n    getAllCharacters,\n    clearError,\n    getComics,\n    getAllComics,\n  };\n};\n\nexport default useMarvelService;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false); //  вказує на те, чи йде завантаження\n  const [error, setError] = useState(null); // вказує на те, чи виникла помилка\n\n  const [process, setProcess] = useState(\"waiting\");\n\n  // useCallback приймає асинхронну функцію, бо ми працюємо з запитами\n  const request = useCallback(\n    async (\n      url,\n      method = \"GET\",\n      body = null,\n      headers = { \"Content-Type\": \"application/json\" },\n    ) => {\n      setLoading(true);\n      setProcess(\"loading\");\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        setLoading(false);\n        return data;\n      } catch (e) {\n        setLoading(false);\n        setError(e.message);\n        setProcess(\"error\");\n        throw e;\n      }\n    },\n    [],\n  );\n\n  const clearError = useCallback(() => {\n    setError(null);\n    setProcess(\"loading\");\n  }, []);\n\n  return { loading, request, error, clearError, process, setProcess };\n};\n","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useState, useEffect, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./comicsList.scss\";\n\nconst ComicsList = () => {\n  const [comicsList, setComicsList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(0);\n  const [comicsEnded, setComicsEnded] = useState(false);\n  const { loading, error, getAllComics } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true); // Запуск методу для отримання коміксів\n  }, []);\n\n  // Метод для отримання нових коміксів\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true); // Додаємо прапорець завантаження нових елементів\n    getAllComics(offset) // Виклик сервісу Marvel для отримання коміксів\n      .then((newComics) => {\n        let ended = false;\n        if (newComics.length < 8) {\n          ended = true;\n        }\n        setComicsList((comicsList) => [...comicsList, ...newComics]); // Додаємо нові комікси до поточного списку\n        setNewItemLoading(false); // Вимикаємо прапорець\n        setOffset((offset) => offset + 8); // Збільшуємо зсув для наступного запиту\n        setComicsEnded(ended);\n      })\n      .catch(() => {\n        // Обробка помилки при отриманні коміксів\n        setComicsList([]); // Очищаємо список коміксів у випадку помилки\n      });\n  };\n\n  if (error) return <ErrorMessage />; // Відображення повідомлення про помилку\n  if (loading && !newItemLoading) return <Spinner />; // Відображення індикатора завантаження\n\n  // Формування списку коміксів\n  const renderComicsList = comicsList.map((comics, i) => (\n    <li key={i} className=\"comics__item\">\n      <Link to={`/comics/${comics.id}`}>\n        <img\n          src={comics.thumbnail}\n          alt={comics.title}\n          className=\"comics__item-img\"\n        />\n\n        <div className=\"comics__item-name\">{comics.title}</div>\n        <div className=\"comics__item-price\">{comics.price}</div>\n      </Link>\n    </li>\n  ));\n\n  // Відображення списку коміксів та кнопки \"Завантажити більше\"\n  return (\n    <div className=\"comics__list\">\n      <ul className=\"comics__grid\">{renderComicsList}</ul>\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{ display: comicsEnded ? \"none\" : \"block\" }}\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nexport default ComicsList;\n","import { Helmet } from \"react-helmet\";\n\nimport ComicsList from \"../comicsList/ComicsList\";\nimport AppBanner from \"../appBanner/AppBanner\";\n\nconst ComicsPage = () => {\n  return (\n    <>\n      <Helmet>\n        <meta name=\"description\" content=\"Page with list of our comics\" />\n        <title>Comics page</title>\n      </Helmet>\n      <AppBanner />\n      <ComicsList />\n    </>\n  );\n};\nexport default ComicsPage;\n"],"sourceRoot":""}