{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/charSearch/CharSearch.js","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","loading","request","error","clearError","process","setProcess","useHttp","setLoading","useState","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","description","slice","name","id","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getCharacter","result","results","getCharacterByName","getAllCharacters","offset","map","getComics","getAllComics","Skeleton","_jsxs","_Fragment","children","className","setContent","Component","Spinner","View","_ref","imgClass","includes","href","RandomChar","setChar","useEffect","updateChar","onCharLoaded","Math","floor","random","then","onClick","mjolnir","newItemLoading","CharList","onCharSelected","chars","setChars","setNewItemLoading","setOffset","charEnded","setCharEnded","myRef","useRef","onRequest","onItemHandler","current","initial","newChars","ended","catch","renderCharsList","tabIndex","onKeyDown","key","disabled","propType","PropTypes","func","isRequired","item","i","CharInfo","props","charId","ErrorBoundary","constructor","state","componentDidCatch","errorInfo","console","log","this","setState","render","CharSearch","Formik","initialValues","validationSchema","Yup","required","onSubmit","values","resetForm","formHandler","Form","Field","type","placeholder","component","Link","to","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"iGAAe,UAA0B,kC,OCkB1BA,IAhBMA,IAEjBC,cAAA,OACEC,MAAO,CACLC,QAAS,QACTC,MAAO,MACPC,OAAQ,MACRC,UAAW,UACXC,OAAQ,UAEVC,IAAKC,EACLC,IAAI,W,2CCsFKC,IAjGUA,KACvB,MAAM,QAAEC,EAAO,QAAEC,EAAO,MAAEC,EAAK,WAAEC,EAAU,QAAEC,EAAO,WAAEC,GCDjCC,MACrB,MAAON,EAASO,GAAcC,oBAAS,IAChCN,EAAOO,GAAYD,mBAAS,OAE5BJ,EAASC,GAAcG,mBAAS,WAuCvC,MAAO,CAAER,UAASC,QApCFS,uBACdC,eACEC,GAII,IAHJC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,MACTG,EAAIH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACPI,EAAOJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAE,eAAgB,oBAE5BP,GAAW,GACXF,EAAW,WAEX,IACE,MAAMc,QAAiBC,MAAMR,EAAK,CAAEC,SAAQI,OAAMC,YAElD,IAAKC,EAASE,GACZ,MAAM,IAAIC,MAAM,mBAADC,OAAoBX,EAAG,cAAAW,OAAaJ,EAASK,SAG9D,MAAMC,QAAaN,EAASO,OAG5B,OADAnB,GAAW,GACJkB,EACP,MAAOE,GAIP,MAHApB,GAAW,GACXE,EAASkB,EAAEC,SACXvB,EAAW,SACLsB,KAGV,IAQyBzB,QAAOC,WALfO,uBAAY,KAC7BD,EAAS,MACTJ,EAAW,aACV,IAE2CD,UAASC,eDzCrDC,GAEIuB,EAAW,4CACXC,EAAU,0CA8BVC,EAAuBC,IAE3B,MAAMC,EAAcD,EAAKC,YACrBD,EAAKC,YAAYlB,OAAS,IACxBiB,EAAKC,YAAYC,MAAM,EAAG,KAAO,MACjCF,EAAKC,YAAW,0BAAAV,OACQS,EAAKG,MAEnC,MAAO,CACLC,GAAIJ,EAAKI,GACTD,KAAMH,EAAKG,KACXF,YAAaA,EACbI,UAAWL,EAAKK,UAAUC,KAAO,IAAMN,EAAKK,UAAUE,UACtDC,SAAUR,EAAKS,KAAK,GAAG7B,IACvB8B,KAAMV,EAAKS,KAAK,GAAG7B,IACnB+B,OAAQX,EAAKW,OAAOC,QAiBlBC,EAAoBF,IAAY,IAADG,EACnC,MAAO,CACLV,GAAIO,EAAOP,GACXW,MAAOJ,EAAOI,MACdd,YAAaU,EAAOV,aAAe,0BACnCe,UAAWL,EAAOK,UAAS,GAAAzB,OACpBoB,EAAOK,UAAS,OACnB,2CACJX,UAAWM,EAAON,UAAUC,KAAO,IAAMK,EAAON,UAAUE,UAC1DU,UAA+B,QAArBH,EAAAH,EAAOO,YAAY,UAAE,IAAAJ,OAAA,EAArBA,EAAuBG,WAAY,QAC7CE,MAAOR,EAAOS,OAAO,GAAGD,MAAK,GAAA5B,OACtBoB,EAAOS,OAAO,GAAGD,MAAK,KACzB,kBAIR,MAAO,CACLnD,UACAE,QACAE,UACAC,aACAgD,aAnEmB1C,UACnB,MAAM2C,QAAerD,EAAQ,GAADsB,OAAIM,EAAQ,eAAAN,OAAca,EAAE,MAAAb,OAAKO,IAC7D,OAAOC,EAAoBuB,EAAO7B,KAAK8B,QAAQ,KAkE/CC,mBA9DyB7C,UACzB,MAAM2C,QAAerD,EAAQ,GAADsB,OACvBM,EAAQ,oBAAAN,OAAmBY,EAAI,KAAAZ,OAAIO,IAExC,OAAOC,EAAoBuB,EAAO7B,KAAK8B,QAAQ,KA2D/CE,iBA/EuB9C,iBAAiC,IAA1B+C,EAAM5C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GALlB,IAMlB,MAAMwC,QAAerD,EAAQ,GAADsB,OACvBM,EAAQ,8BAAAN,OAA6BmC,EAAM,KAAAnC,OAAIO,IAIpD,OAAOwB,EAAO7B,KAAK8B,QAAQI,IAAI5B,IA0E/B5B,aACAyD,UA9BgBjD,UAChB,MAAM2C,QAAerD,EAAQ,GAADsB,OAAIM,EAAQ,WAAAN,OAAUa,EAAE,MAAAb,OAAKO,IACzD,OAAOe,EAAiBS,EAAO7B,KAAK8B,QAAQ,KA6B5CM,aAtCmBlD,iBAAuB,IAAhB+C,EAAM5C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACnC,MAAMwC,QAAerD,EAAQ,GAADsB,OACvBM,EAAQ,0BAAAN,OAAyBmC,EAAM,KAAAnC,OAAIO,IAEhD,OAAOwB,EAAO7B,KAAK8B,QAAQI,IAAId,O,yME1CpBiB,MAjBEA,IAETC,eAAAC,WAAA,CAAAC,SAAA,CACI5E,cAAA,KAAG6E,UAAU,eAAcD,SAAC,iDAC5BF,eAAA,OAAKG,UAAU,WAAUD,SAAA,CACrBF,eAAA,OAAKG,UAAU,yBAAwBD,SAAA,CACnC5E,cAAA,OAAK6E,UAAU,2BACf7E,cAAA,OAAK6E,UAAU,4BAEnB7E,cAAA,OAAK6E,UAAU,0BACf7E,cAAA,OAAK6E,UAAU,0BACf7E,cAAA,OAAK6E,UAAU,gCCShBC,MAlBIA,CAAC/D,EAASgE,EAAW3C,KACtC,OAAQrB,GACN,IAAK,UACH,OAAOf,cAACyE,EAAQ,IAElB,IAAK,UACH,OAAOzE,cAACgF,IAAO,IAEjB,IAAK,YACH,OAAOhF,cAAC+E,EAAS,CAAC3C,KAAMA,IAE1B,IAAK,QACH,OAAOpC,cAACD,IAAY,IACtB,QACE,MAAM,IAAIkC,MAAM,8BClBP,G,MAAA,IAA0B,qCCQzC,MA6CMgD,EAAOC,IAAe,IAAd,KAAE9C,GAAM8C,EACpB,MAAM,KAAEpC,EAAI,YAAEF,EAAW,UAAEI,EAAS,SAAEG,EAAQ,KAAEE,GAASjB,EAKnD+C,GAAoB,OAATnC,QAAS,IAATA,OAAS,EAATA,EAAWoC,SAAS,wBACjC,4CACA,kBAEJ,OACEV,eAAA,OAAKG,UAAU,oBAAmBD,SAAA,CAChC5E,cAAA,OAEEO,IAAKyC,EACLvC,IAAI,mBACJoE,UAAWM,IAGbT,eAAA,OAAKG,UAAU,mBAAkBD,SAAA,CAC/B5E,cAAA,KAAG6E,UAAU,mBAAkBD,SAAE9B,IACjC9C,cAAA,KAAG6E,UAAU,oBAAmBD,SAAEhC,IAClC8B,eAAA,OAAKG,UAAU,mBAAkBD,SAAA,CAC/B5E,cAAA,KAAGqF,KAAMlC,EAAU0B,UAAU,sBAAqBD,SAChD5E,cAAA,OAAK6E,UAAU,QAAOD,SAAC,eAEzB5E,cAAA,KAAGqF,KAAMhC,EAAMwB,UAAU,2BAA0BD,SACjD5E,cAAA,OAAK6E,UAAU,QAAOD,SAAC,qBAQpBU,MAhFIA,KACjB,MAAO3C,EAAM4C,GAAWpE,mBAAS,KAC3B,aAAE6C,EAAY,WAAElD,EAAU,QAAEC,EAAO,WAAEC,GAAeN,cAG1D8E,qBAAU,KACRC,MACC,IAEH,MAAMC,EAAgB/C,IACpB4C,EAAQ5C,IAIJ8C,EAAaA,KACjB3E,IACA,MAAMiC,EAAK4C,KAAKC,MAAmB,IAAbD,KAAKE,SAAiC,QAE5D7B,EAAajB,GACV+C,KAAKJ,GACLI,MAAK,IAAM9E,EAAW,gBAG3B,OACE0D,eAAA,OAAKG,UAAU,aAAYD,SAAA,CACxBE,EAAW/D,EAASkE,EAAMtC,GAC3B+B,eAAA,OAAKG,UAAU,qBAAoBD,SAAA,CACjCF,eAAA,KAAGG,UAAU,oBAAmBD,SAAA,CAAC,8BAE/B5E,cAAA,SAAM,4CAGRA,cAAA,KAAG6E,UAAU,oBAAmBD,SAAC,0BACjC5E,cAAA,UAAQ6E,UAAU,sBAAqBD,SACrC5E,cAAA,OAAK6E,UAAU,QAAQkB,QAASN,EAAWb,SAAC,aAI9C5E,cAAA,OAAKO,IAAKyF,EAASvF,IAAI,UAAUoE,UAAU,kC,uBCpCnD,MAAMC,EAAaA,CAAC/D,EAASgE,EAAWkB,KACtC,OAAQlF,GACN,IAAK,UACH,OAAOf,cAACgF,IAAO,IAEjB,IAAK,UACH,OAAOiB,EAAiBjG,cAAC+E,EAAS,IAAM/E,cAACgF,IAAO,IAElD,IAAK,YACH,OAAOhF,cAAC+E,EAAS,IAEnB,IAAK,QACH,OAAO/E,cAACD,IAAY,IACtB,QACE,MAAM,IAAIkC,MAAM,8BAIhBiE,EAAWhB,IAAyB,IAAxB,eAAEiB,GAAgBjB,EAClC,MAAOkB,EAAOC,GAAYlF,mBAAS,KAC5B8E,EAAgBK,GAAqBnF,oBAAS,IAC9CkD,EAAQkC,GAAapF,mBAAS,MAC9BqF,EAAWC,GAAgBtF,oBAAS,GAErCuF,EAAQC,oBAER,iBAAEvC,EAAgB,QAAErD,EAAO,WAAEC,GAAeN,cAElD8E,qBAAU,KACRoB,EAAUvC,GAAQ,KACjB,IAEH,MAAMwC,EAAiB9D,IACrBoD,EAAepD,GACf2D,EAAMI,QAAU/D,GAIZ6D,EAAYA,CAACvC,EAAQ0C,KACfT,GAAVS,GACA3C,EAAiBC,GACdyB,MAAMkB,IACL,IAAIC,GAAQ,EACRD,EAAStF,OAAS,IACpBuF,GAAQ,GAKVZ,GAAUD,GAAU,IAAIA,KAAUY,KAClCV,GAAkB,GAClBC,GAAWlC,GAAWA,EAAS,IAC/BoC,EAAaQ,GACbjG,EAAW,gBAEZkG,OAAM,KAELb,EAAS,QASTc,EAAkBf,EAAM9B,KAAK3B,GACjC+B,eAAA,MAEE0C,SAAU,EACVC,UAAY/E,IACI,MAAVA,EAAEgF,KAAyB,UAAVhF,EAAEgF,KAAiBT,EAAclE,EAAKI,KAG7D8B,UAAS,cAAA3C,OACPS,EAAKI,KAAO2D,EAAMI,QAAU,uBAAyB,IAEvDf,QAASA,IAAMc,EAAclE,EAAKI,IAAK6B,SAAA,CAEvC5E,cAAA,OACEO,IAAKoC,EAAKK,UACVvC,IAAKkC,EAAKG,KACV+B,UACElC,EAAKK,UAAUoC,SAAS,uBACpB,0CACA,mBAGRpF,cAAA,OAAK6E,UAAU,aAAYD,SAAEjC,EAAKG,SAf7BH,EAAKI,MAoBd,OACE2B,eAAA,OAAKG,UAAU,aAAYD,SAAA,CACzB5E,cAAA,MAAI6E,UAAU,aAAYD,SACvBE,EAAW/D,GAAS,IAAMoG,GAAiBlB,KAE9CjG,cAAA,UACE6E,UAAU,mCACV0C,SAAUtB,EACVhG,MAAO,CACLC,QAASsG,EAAY,OAAS,SAEhCT,QAASA,IAAMa,EAAUvC,GAASO,SAElC5E,cAAA,OAAK6E,UAAU,QAAOD,SAAC,oBAM/BsB,EAASsB,SAAW,CAClBrB,eAAgBsB,IAAUC,KAAKC,YAGlBzB,Q,MCtHf,MA2BMjB,EAAOC,IAAe,IAAd,KAAE9C,GAAM8C,EACpB,MAAM,KAAEpC,EAAI,YAAEF,EAAW,UAAEI,EAAS,SAAEG,EAAQ,KAAEE,EAAI,OAAEC,GAAWlB,EACjE,OACEsC,eAAAC,WAAA,CAAAC,SAAA,CACEF,eAAA,OAAKG,UAAU,eAAcD,SAAA,CAC3B5E,cAAA,OAAKO,IAAKyC,EAAWvC,IAAKqC,IAC1B4B,eAAA,OAAAE,SAAA,CACE5E,cAAA,OAAK6E,UAAU,kBAAiBD,SAAE9B,IAClC4B,eAAA,OAAKG,UAAU,aAAYD,SAAA,CACzB5E,cAAA,KAAGqF,KAAMlC,EAAU0B,UAAU,sBAAqBD,SAChD5E,cAAA,OAAK6E,UAAU,QAAOD,SAAC,eAEzB5E,cAAA,KAAGqF,KAAMhC,EAAMwB,UAAU,2BAA0BD,SACjD5E,cAAA,OAAK6E,UAAU,QAAOD,SAAC,oBAK/B5E,cAAA,OAAK6E,UAAU,cAAaD,SAAEhC,IAC9B5C,cAAA,OAAK6E,UAAU,eAAcD,SAAC,YAC9BF,eAAA,MAAIG,UAAU,oBAAmBD,SAAA,CAC9BtB,EAAO5B,OAAS,EAAI,KAAI,2BAAAQ,OAA8BY,GACtDQ,EAAOgB,KAAI,CAACsD,EAAMC,KACjB,KAAIA,EAAI,GACR,OACE7H,cAAA,MAAY6E,UAAU,oBAAmBD,SACtCgD,EAAK9E,MADC+E,aAcNC,MAlEGC,IAChB,MAAOpF,EAAM4C,GAAWpE,mBAAS,OAE3B,aAAE6C,EAAY,WAAElD,EAAU,QAAEC,EAAO,WAAEC,GAAeN,cAEpD+E,EAAapE,uBAAY,KAC7B,MAAM,OAAE2G,GAAWD,EACdC,IAGLlH,IACAkD,EAAagE,GACVlC,KAAKJ,GACLI,MAAK,IAAM9E,EAAW,kBACxB,CAAC+G,EAAOjH,EAAYkD,EAAchD,IAErCwE,qBAAU,KACRC,MACC,CAACsC,EAAMC,SAEV,MAAMtC,EAAgB/C,IACpB4C,EAAQ5C,IAGV,OAAO3C,cAAA,OAAK6E,UAAU,aAAYD,SAAEE,EAAW/D,EAASkE,EAAMtC,MC/BhE,MAAMsF,UAAsBlD,YAAUmD,cAAA,SAAAzG,WAAA,KACpC0G,MAAQ,CACNtH,OAAO,GAGTuH,kBAAkBvH,EAAOwH,GACvBC,QAAQC,IAAI1H,EAAOwH,GACnBG,KAAKC,SAAS,CACZ5H,OAAO,IAIX6H,SACE,OAAIF,KAAKL,MAAMtH,MACNb,cAAA,MAAA4E,SAAI,4BAEN4D,KAAKT,MAAMnD,UAIPqD,QCrBA,MAA0B,mC,+BCsF1BU,MA9EIA,KACjB,MAAOhI,EAASO,GAAcC,oBAAS,IAChCN,EAAOO,GAAYD,oBAAS,IAC5BwB,EAAM4C,GAAWpE,mBAAS,OAC3B,mBAAEgD,GAAuBzD,cAgB/B,OACEgE,eAAA,OAAKG,UAAU,cAAaD,SAAA,CAC1B5E,cAAC4I,IAAM,CACLC,cAAe,CACb/F,KAAM,IAERgG,iBAAkBC,IAAW,CAC3BjG,KAAMiG,MAAaC,SAAS,4BAE9BC,SAAUA,CAACC,EAAMhE,KAAA,IAAE,UAAEiE,GAAWjE,EAAA,MAvBlBkE,EAACtG,EAAMqG,KACzBjI,GAAW,GACXiD,EAAmBrB,GAChBgD,MAAMnD,IACL4C,EAAQ5C,GACRzB,GAAW,GACXiI,OAEDjC,OAAM,KACLhG,GAAW,GACXE,GAAS,OAcPgI,CAAYF,EAAOpG,KAAMqG,IAC1BvE,SAEDF,eAAC2E,IAAI,CAAAzE,SAAA,CACH5E,cAAA,MAAI6E,UAAU,qBAAoBD,SAAC,iCAEnCF,eAAA,OAAKG,UAAU,6BAA4BD,SAAA,CACzC5E,cAACsJ,IAAK,CACJzE,UAAU,qBACV9B,GAAG,OACHD,KAAK,OACLyG,KAAK,OACLC,YAAY,eAGdxJ,cAAA,UAAQ6E,UAAU,sBAAsB0E,KAAK,SAAQ3E,SACnD5E,cAAA,OAAK6E,UAAU,QAAOD,SAAC,cAG3B5E,cAACD,IAAY,CACX8E,UAAU,6CACV/B,KAAK,OACL2G,UAAU,aAKf9I,GAAWX,cAACgF,IAAO,IACnBnE,GACCb,cAAA,OAAK6E,UAAU,6CAA4CD,SAAC,8DAI7DjC,GACC+B,eAAA,OAAKG,UAAU,6BAA4BD,SAAA,CACzCF,eAAA,KAAGG,UAAU,8CAA6CD,SAAA,CAAC,mBACxCjC,EAAKG,KAAK,YAE7B9C,cAAC0J,IAAI,CAACC,GAAE,cAAAzH,OAAgBS,EAAKI,IAAK6B,SAChC5E,cAAA,UAAQ6E,UAAU,2BAA0BD,SAC1C5E,cAAA,OAAK6E,UAAU,QAAOD,SAAC,uBChCtBgF,UAnCEA,KACf,MAAOC,EAActE,GAAWpE,mBAAS,MAOzC,OACEuD,eAAAC,WAAA,CAAAC,SAAA,CACEF,eAACoF,IAAM,CAAAlF,SAAA,CACL5E,cAAA,QAAM8C,KAAK,cAAciH,QAAQ,8BACjC/J,cAAA,SAAA4E,SAAO,iCAET5E,cAACiI,EAAa,CAAArD,SACZ5E,cAACsF,EAAU,MAEbZ,eAAA,OAAKG,UAAU,gBAAeD,SAAA,CAC5B5E,cAACiI,EAAa,CAAArD,SAEZ5E,cAACkG,EAAQ,CAACC,eAhBMpD,IACtBwC,EAAQxC,QAkBJ/C,cAACiI,EAAa,CAAArD,SACZF,eAAA,OAAAE,SAAA,CACE5E,cAAC8H,EAAQ,CAACE,OAAQ6B,IAClB7J,cAAC2I,EAAU,YAIjB3I,cAAA,OAAK6E,UAAU,gBAAgBtE,IAAKyJ,EAAYvJ,IAAI","file":"static/js/5.78c584fd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      style={{\n        display: \"block\",\n        width: \"250\",\n        height: \"250\",\n        objectFit: \"contain\",\n        margin: \"0 auto\",\n      }}\n      src={img}\n      alt=\"Error\"\n    />\n  );\n};\n\nexport default ErrorMessage;\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n  const { loading, request, error, clearError, process, setProcess } =\n    useHttp();\n\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n  const _apiKey = \"apikey=e71e2718fabff072296a2d9a69c1759c\";\n  const _baseOffset = 210;\n\n  // запити до API\n\n  //запит на групу персонажів\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const result = await request(\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`,\n    ); // Request URL з сайту Marvel Developer\n\n    //повертаємо масив з новими об'єктами\n    return result.data.results.map(_transformCharacter);\n  };\n\n  //запит на одного персонажа\n  const getCharacter = async (id) => {\n    const result = await request(`${_apiBase}characters/${id}?&${_apiKey}`); // Request URL з сайту Marvel Developer\n    return _transformCharacter(result.data.results[0]);\n  };\n\n  //запит на персонажа за іменем\n  const getCharacterByName = async (name) => {\n    const result = await request(\n      `${_apiBase}characters?name=${name}&${_apiKey}`,\n    ); // Request URL з сайту Marvel Developer\n    return _transformCharacter(result.data.results[0]);\n  };\n\n  //метод отримує дані та трансформує в необхідні. в нашому випадку отримує великий об'єкт з даними про персонажа і повертає об'єкт з потрібними нам даними\n  const _transformCharacter = (char) => {\n    //перевірка для description\n    const description = char.description\n      ? char.description.length > 150\n        ? char.description.slice(0, 149) + \"...\"\n        : char.description\n      : `There is no data about ${char.name}`;\n\n    return {\n      id: char.id,\n      name: char.name,\n      description: description,\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  //запит на групу коміксів\n  const getAllComics = async (offset = 0) => {\n    const result = await request(\n      `${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`,\n    );\n    return result.data.results.map(_transformComics);\n  };\n\n  const getComics = async (id) => {\n    const result = await request(`${_apiBase}comics/${id}?&${_apiKey}`); // Request URL з сайту Marvel Developer\n    return _transformComics(result.data.results[0]);\n  };\n\n  const _transformComics = (comics) => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || \"There is no description\",\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} p.`\n        : \"No information about the number of pages\",\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      language: comics.textObjects[0]?.language || \"en-us\",\n      price: comics.prices[0].price\n        ? `${comics.prices[0].price}$`\n        : \"not available\",\n    };\n  };\n\n  return {\n    loading,\n    error,\n    process,\n    setProcess,\n    getCharacter,\n    getCharacterByName,\n    getAllCharacters,\n    clearError,\n    getComics,\n    getAllComics,\n  };\n};\n\nexport default useMarvelService;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false); //  вказує на те, чи йде завантаження\n  const [error, setError] = useState(null); // вказує на те, чи виникла помилка\n\n  const [process, setProcess] = useState(\"waiting\");\n\n  // useCallback приймає асинхронну функцію, бо ми працюємо з запитами\n  const request = useCallback(\n    async (\n      url,\n      method = \"GET\",\n      body = null,\n      headers = { \"Content-Type\": \"application/json\" },\n    ) => {\n      setLoading(true);\n      setProcess(\"loading\");\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        setLoading(false);\n        return data;\n      } catch (e) {\n        setLoading(false);\n        setError(e.message);\n        setProcess(\"error\");\n        throw e;\n      }\n    },\n    [],\n  );\n\n  const clearError = useCallback(() => {\n    setError(null);\n    setProcess(\"loading\");\n  }, []);\n\n  return { loading, request, error, clearError, process, setProcess };\n};\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from \"../components/spinner/Spinner\";\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\nimport Skeleton from \"../components/skeleton/Skeleton\";\n\nconst setContent = (process, Component, data) => {\n  switch (process) {\n    case \"waiting\":\n      return <Skeleton />;\n\n    case \"loading\":\n      return <Spinner />;\n\n    case \"confirmed\":\n      return <Component data={data} />;\n\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unexpected process state\");\n  }\n};\n\nexport default setContent;\n","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from \"react\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({});\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  // один з методів життєвого циклу компонента\n  useEffect(() => {\n    updateChar();\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  //метод звертається до сервера - отримує дані - записує в state\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000); //випадкове id персонажа. рандомне число розраховується за формулою\n\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button className=\"button button__main\">\n          <div className=\"inner\" onClick={updateChar}>\n            try it\n          </div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\n//компонент для відображення елементу верстки(простий елемент рендерингу)\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki } = data; //деструктуризація об'єкта (char) з даними про персонажа\n\n  // const style = thumbnail.includes(\"image_not_available\")\n  //   ? { objectFit: \"contain\" }\n  //   : null;\n  const imgClass = thumbnail?.includes(\"image_not_available\")\n    ? \"randomchar__img randomchar__img--no-image\"\n    : \"randomchar__img\";\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        // style={style}\n        src={thumbnail}\n        alt=\"Random character\"\n        className={imgClass}\n      />\n\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./charList.scss\";\nimport Skeleton from \"../skeleton/Skeleton\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case \"waiting\":\n      return <Spinner />;\n\n    case \"loading\":\n      return newItemLoading ? <Component /> : <Spinner />;\n\n    case \"confirmed\":\n      return <Component />;\n\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unexpected process state\");\n  }\n};\n\nconst CharList = ({ onCharSelected }) => {\n  const [chars, setChars] = useState([]); // Список персонажів\n  const [newItemLoading, setNewItemLoading] = useState(false); //  вказує на те, чи йде завантаження нових елементів\n  const [offset, setOffset] = useState(210); // Початковий зсув для отримання нових персонажів\n  const [charEnded, setCharEnded] = useState(false);\n\n  const myRef = useRef();\n\n  const { getAllCharacters, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true); // Запуск методу для отримання персонажів\n  }, []);\n\n  const onItemHandler = (id) => {\n    onCharSelected(id);\n    myRef.current = id;\n  };\n\n  // Метод для отримання нових персонажів\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true); // Додаємо прапорець завантаження нових елементів\n    getAllCharacters(offset) // Виклик сервісу Marvel для отримання персонажів\n      .then((newChars) => {\n        let ended = false;\n        if (newChars.length < 9) {\n          ended = true;\n        }\n\n        // Успішна обробка результатів\n\n        setChars((chars) => [...chars, ...newChars]); // Додаємо нових персонажів до поточного списку\n        setNewItemLoading(false); // Вимикаємо прапорец\n        setOffset((offset) => offset + 9); // Збільшуємо зсув для наступного запиту\n        setCharEnded(ended);\n        setProcess(\"confirmed\");\n      })\n      .catch(() => {\n        // Обробка помилки при отриманні персонажів\n        setChars([]); // Очищаємо список персонажів у випадку помилки\n      });\n  };\n\n  // Відображення різних станів компонента в залежності від значень прапорців\n  // if (error) return <ErrorMessage />; // Відображення повідомлення про помилку\n  // if (loading && !newItemLoading) return <Spinner />; // Відображення індикатора завантаження\n\n  // Формування списку персонажів для відображення\n  const renderCharsList = chars.map((char) => (\n    <li\n      //new\n      tabIndex={0}\n      onKeyDown={(e) => {\n        if (e.key === \" \" || e.key === \"Enter\") onItemHandler(char.id);\n      }}\n      key={char.id}\n      className={`char__item ${\n        char.id === myRef.current ? \"char__item--selected\" : \"\"\n      }`}\n      onClick={() => onItemHandler(char.id)} // Передача ідентифікатора обраного персонажа до App.js\n    >\n      <img\n        src={char.thumbnail}\n        alt={char.name}\n        className={\n          char.thumbnail.includes(\"image_not_available\")\n            ? \"char__item-img char__item-img--no-image\"\n            : \"char__item-img\"\n        }\n      />\n      <div className=\"char__name\">{char.name}</div>\n    </li>\n  ));\n\n  // Відображення списку персонажів та кнопки \"Завантажити більше\"\n  return (\n    <div className=\"char__list\">\n      <ul className=\"char__grid\">\n        {setContent(process, () => renderCharsList, newItemLoading)}\n      </ul>\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{\n          display: charEnded ? \"none\" : \"block\",\n        }}\n        onClick={() => onRequest(offset)} // Виклик методу для отримання нових персонажів\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propType = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./charInfo.scss\";\nimport setContent from \"../../utils/setContent\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  const updateChar = useCallback(() => {\n    const { charId } = props; //передаємо пропси з App.js. деструктуруємо charId\n    if (!charId) {\n      return;\n    }\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  }, [props, clearError, getCharacter, setProcess]);\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  return <div className=\"char__info\">{setContent(process, View, char)}</div>;\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : `There is no comics with ${name}`}\n        {comics.map((item, i) => {\n          if (i > 9) return;\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { Component } from \"react\";\nclass ErrorBoundary extends Component {\n  state = {\n    error: false,\n  };\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo);\n    this.setState({\n      error: true,\n    });\n  }\n\n  render() {\n    if (this.state.error) {\n      return <h2>Something went wrong...</h2>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"./charSearch.scss\";\nimport { useState } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport { Link } from \"react-router-dom\";\n\nconst CharSearch = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [char, setChar] = useState(null);\n  const { getCharacterByName } = useMarvelService();\n\n  const formHandler = (name, resetForm) => {\n    setLoading(true);\n    getCharacterByName(name)\n      .then((char) => {\n        setChar(char);\n        setLoading(false);\n        resetForm();\n      })\n      .catch(() => {\n        setLoading(false);\n        setError(true);\n      });\n  };\n\n  return (\n    <div className=\"char-search\">\n      <Formik\n        initialValues={{\n          name: \"\",\n        }}\n        validationSchema={Yup.object({\n          name: Yup.string().required(\"This field is required\"),\n        })}\n        onSubmit={(values, { resetForm }) =>\n          formHandler(values.name, resetForm)\n        }\n      >\n        <Form>\n          <h2 className=\"char-search__title\">Or find a character by name:</h2>\n\n          <div className=\"char-search__input-wrapper\">\n            <Field\n              className=\"char-search__input\"\n              id=\"name\"\n              name=\"name\"\n              type=\"text\"\n              placeholder=\"Enter name\"\n            />\n\n            <button className=\"button button__main\" type=\"submit\">\n              <div className=\"inner\">FIND</div>\n            </button>\n          </div>\n          <ErrorMessage\n            className=\"char-search__text char-search__text--error\"\n            name=\"name\"\n            component=\"div\"\n          />\n        </Form>\n      </Formik>\n\n      {loading && <Spinner />}\n      {error && (\n        <div className=\"char-search__text char-search__text--error\">\n          The character was not found. Check the name and try again\n        </div>\n      )}\n      {char && (\n        <div className=\"char-search__input-wrapper\">\n          <p className=\"char-search__text char-search__text--sucses\">\n            There is! Visit {char.name} page?\n          </p>\n          <Link to={`/character/${char.id}`}>\n            <button className=\"button button__secondary\">\n              <div className=\"inner\">TO PAGE</div>\n            </button>\n          </Link>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default CharSearch;\n","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from \"../../resources/img/vision.png\";\nimport CharSearch from \"../charSearch/CharSearch\";\n\nconst MainPage = () => {\n  const [selectedChar, setChar] = useState(null);\n\n  // метод який встановлює вибраний персонаж (selectedChar)\n  const onCharSelected = (id) => {\n    setChar(id);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <meta name=\"description\" content=\"Marvel information portal\" />\n        <title>Marvel information portal</title>\n      </Helmet>\n      <ErrorBoundary>\n        <RandomChar />\n      </ErrorBoundary>\n      <div className=\"char__content\">\n        <ErrorBoundary>\n          {/* створюємо пропс для встановлення персонажа*/}\n          <CharList onCharSelected={onCharSelected} />\n        </ErrorBoundary>\n\n        <ErrorBoundary>\n          <div>\n            <CharInfo charId={selectedChar} />\n            <CharSearch />\n          </div>\n        </ErrorBoundary>\n      </div>\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n    </>\n  );\n};\n\nexport default MainPage;\n"],"sourceRoot":""}